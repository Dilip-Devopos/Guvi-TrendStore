pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Dilip-Devopos/Guvi-TrendStore.git'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Clone Repo') {
            steps {
                git url: "${GIT_REPO}", branch: 'main'
            }
        }

        stage('Configure AWS Credentials') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        aws sts get-caller-identity
                        aws eks update-kubeconfig --region us-west-2 --name trend-app
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                        #!/bin/bash
                        cd deployment_pipeline

                        NAMESPACE=default
                        DEPLOYMENT_NAME=trend-app-deployment
                        SERVICE_NAME=trend-app-service
                        DEPLOYMENT_YAML=deployment.yml
                        SERVICE_YAML=service.yml

                        echo "Checking if deployment '$DEPLOYMENT_NAME' exists..."
                        if kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" &> /dev/null; then
                            echo "Deployment '$DEPLOYMENT_NAME' exists. Deleting it..."
                            kubectl delete deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE"
                            sleep 5
                        else
                            echo "Deployment '$DEPLOYMENT_NAME' does not exist. Skipping delete."
                        fi

                        echo "Applying deployment YAML..."
                        kubectl apply -f "$DEPLOYMENT_YAML" -n "$NAMESPACE"

                        echo "Checking if service '$SERVICE_NAME' exists..."
                        if kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" &> /dev/null; then
                            echo "Service '$SERVICE_NAME' exists. Skipping apply."
                        else
                            echo "Service '$SERVICE_NAME' does not exist. Applying service YAML..."
                            kubectl apply -f "$SERVICE_YAML" -n "$NAMESPACE"
                        fi

                        echo "âœ… Deployment complete."
                    '''
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "Good news!\n\nThe Jenkins job '${env.JOB_NAME}' completed successfully.\nBuild URL: ${env.BUILD_URL}",
                to: "dilipbca99@gmail.com"
            )
        }

        failure {
            emailext(
                subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "Unfortunately, the Jenkins job '${env.JOB_NAME}' has failed.\nBuild URL: ${env.BUILD_URL}",
                to: "dilipbca99@gmail.com"
            )
        }
    }
}